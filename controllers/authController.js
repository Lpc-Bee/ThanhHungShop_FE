    const { 
        registerUser, 
        authenticateUser, 
        verifyToken, 
        getUserInfo, 
        updateUserInfo, 
        updateUserPassword 
    } = require('../services/authService');

    // H√†m x·ª≠ l√Ω ƒëƒÉng k√Ω
    exports.register = async (req, res) => {
        const { firstName, lastName, email, password } = req.body;

        if (!firstName || !lastName || !email || !password) {
            return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin!' });
        }

        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
            return res.status(400).json({ message: 'Email kh√¥ng h·ª£p l·ªá!' });
        }

        try {
            const user = await registerUser(firstName, lastName, email, password);
            res.status(201).json({
                message: 'ƒêƒÉng k√Ω th√†nh c√¥ng!',
                user,
            });
        } catch (err) {
            console.error('L·ªói ƒëƒÉng k√Ω:', err.message);
            res.status(500).json({ message: 'L·ªói server', error: err.message });
        }
    };
    exports.login = async (req, res) => {
        const { email, password } = req.body;
    
        if (!email || !password) {
            return res.status(400).json({ message: 'Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc!' });
        }
    
        try {
            const { token, user } = await authenticateUser(email, password);
    
            // ƒê·∫£m b·∫£o r·∫±ng token v√† user ƒë∆∞·ª£c g·ª≠i l·∫°i cho client
            res.status(200).json({
                message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!',
                token,
                user: {
                    id: user.id,
                    email: user.email,
                    firstName: user.FirstName,
                    lastName: user.LastName,
                },
            });
        } catch (err) {
            console.error('L·ªói ƒëƒÉng nh·∫≠p:', err.message);
    
            if (err.message === 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y!' || 
                err.message === 'M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!') {
                return res.status(401).json({ message: err.message });
            }
    
            res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i sau!' });
        }
    };
   // H√†m x√°c th·ª±c token
    exports.verifyToken = async (req, res, next) => {
    const token = req.headers['authorization']?.split(' ')[1]; // L·∫•y token t·ª´ header

    if (!token) {
        return res.status(403).json({ message: 'Token kh√¥ng h·ª£p l·ªá' });
    }

    try {
        // Gi·∫£i m√£ token v√† l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret_key');
        req.user = decoded;  // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o request

        next();  // Chuy·ªÉn ti·∫øp request t·ªõi c√°c h√†m x·ª≠ l√Ω ti·∫øp theo
    } catch (err) {
        console.error('Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n:', err.message);
        res.status(403).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n' });
    }
};


    // üìù L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    exports.getUserInfo = async (req, res) => {
        try {
            const user = await getUserInfo(req.user.id); // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ `req.user.id`
            res.status(200).json({ user });
        } catch (err) {
            console.error('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', err.message);
            res.status(500).json({ message: 'L·ªói m√°y ch·ªß!' });
        }
    };

    // üìù C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
    exports.updateUserInfo = async (req, res) => {
        try {
            const { firstName, lastName } = req.body;
            await updateUserInfo(req.user.id, firstName, lastName);
            res.status(200).json({ message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!' });
        } catch (err) {
            console.error('L·ªói c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:', err.message);
            res.status(500).json({ message: 'L·ªói m√°y ch·ªß!' });
        }
    };

    // üìù C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
    exports.updatePassword = async (req, res) => {
        try {
            await updateUserPassword(req.user.id, req.body.currentPassword, req.body.newPassword);
            res.status(200).json({ message: 'C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng!' });
        } catch (err) {
            res.status(500).json({ message: 'L·ªói server', error: err.message });
        }
    };

    // üìù X√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng
    exports.deleteAccount = async (req, res) => {
        try {
            await deleteAccount(req.user.id);
            res.status(200).json({ message: 'X√≥a t√†i kho·∫£n th√†nh c√¥ng!' });
        } catch (err) {
            res.status(500).json({ message: 'L·ªói server', error: err.message });
        }
    };