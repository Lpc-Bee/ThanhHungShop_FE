const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const sql = require('mssql');

// H√†m ƒëƒÉng k√Ω ng∆∞·ªùi d√πng
const registerUser = async (firstName, lastName, email, password, role = 'user') => {
    const existingUser = await new sql.Request()
        .input('email', sql.NVarChar, email)
        .query('SELECT * FROM Users WHERE Email = @email');

    if (existingUser.recordset.length > 0) {
        throw new Error('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!');
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    await new sql.Request()
        .input('firstName', sql.NVarChar, firstName)
        .input('lastName', sql.NVarChar, lastName)
        .input('email', sql.NVarChar, email)
        .input('password', sql.NVarChar, hashedPassword)
        .input('role', sql.NVarChar, role)  // G·∫Øn role cho t√†i kho·∫£n
        .query('INSERT INTO Users (FirstName, LastName, Email, Password, Role) VALUES (@firstName, @lastName, @email, @password, @role)');

    return { firstName, lastName, email, role };
};

// H√†m ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng

const authenticateUser = async (email, password) => {
    const user = await new sql.Request()
        .input('email', sql.NVarChar, email)
        .query('SELECT id, email, password, FirstName, LastName, Role FROM Users WHERE Email = @email');

    if (!user.recordset || user.recordset.length === 0) {
        throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y!');
    }

    const userInfo = user.recordset[0];

    const isMatch = await bcrypt.compare(password, userInfo.password);
    if (!isMatch) {
        throw new Error('M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!');
    }

    const token = jwt.sign(
        { 
            id: userInfo.id, 
            email: userInfo.email, 
            firstName: userInfo.FirstName, 
            lastName: userInfo.LastName, 
            role: userInfo.Role 
        }, 
        process.env.JWT_SECRET || 'secret_key', 
        { expiresIn: '1h' }
    );

    return { token, user: userInfo };
};


// üìù L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
const getUserInfo = async (id) => {
    const result = await new sql.Request()
        .input('id', sql.Int, id)
        .query('SELECT id, email, FirstName, LastName FROM Users WHERE id = @id');

    if (!result.recordset[0]) {
        throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!');
    }

    return result.recordset[0];
};

// üìù **X√°c th·ª±c token**
const verifyToken = (token) => {
    return jwt.verify(token, process.env.JWT_SECRET || 'secret_key');
};

// üìù **L·∫•y th√¥ng tin ng∆∞·ªùi d√πng**
exports.getUserInfo = async (req, res) => {
    const userId = req.user.id;

    try {
        const result = await new sql.Request()
            .input('id', sql.Int, userId)
            .query('SELECT id, email, FirstName, LastName FROM Users WHERE id = @id');
        
        if (!result.recordset[0]) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y h·ªì s∆° ng∆∞·ªùi d√πng!' });
        }

        res.status(200).json({ user: result.recordset[0] });
    } catch (err) {
        console.error('L·ªói khi l·∫•y h·ªì s∆° ng∆∞·ªùi d√πng:', err.message);
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß!' });
    }
};


// üìù **C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng**
const updateUserInfo = async (id, firstName, lastName) => {
    await new sql.Request()
        .input('id', sql.Int, id)
        .input('FirstName', sql.NVarChar, firstName)
        .input('LastName', sql.NVarChar, lastName)
        .query('UPDATE Users SET FirstName = @FirstName, LastName = @LastName WHERE id = @id');
};


// üìù **C·∫≠p nh·∫≠t m·∫≠t kh·∫©u ng∆∞·ªùi d√πng**

const updateUserPassword = async (id, currentPassword, newPassword) => {
    const result = await new sql.Request()
        .input('id', sql.Int, id)
        .query('SELECT password FROM Users WHERE id = @id');

    const user = result.recordset[0];
    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) throw new Error('M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c!');

    if (currentPassword === newPassword) throw new Error('M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c gi·ªëng m·∫≠t kh·∫©u c≈©!');

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    await new sql.Request()
        .input('id', sql.Int, id)
        .input('password', sql.NVarChar, hashedPassword)
        .query('UPDATE Users SET Password = @password WHERE id = @id');
};

const deleteUser = async (req, res) => {
    const userId = req.params.id;

    try {
        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng
        const user = await new sql.Request()
            .input('id', sql.Int, userId)
            .query('SELECT * FROM Users WHERE id = @id');

        if (!user.recordset.length) {
            return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!' });
        }

        // X√≥a ng∆∞·ªùi d√πng kh·ªèi c∆° s·ªü d·ªØ li·ªáu
        await new sql.Request()
            .input('id', sql.Int, userId)
            .query('DELETE FROM Users WHERE id = @id');

        res.status(200).json({ message: 'Ng∆∞·ªùi d√πng ƒë√£ b·ªã x√≥a th√†nh c√¥ng!' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server khi x√≥a ng∆∞·ªùi d√πng!', error: error.message });
    }
};

module.exports = { 
    getUserInfo, 
    registerUser, 
    authenticateUser, 
    verifyToken, 
    updateUserInfo, 
    updateUserPassword,
    deleteUser
};